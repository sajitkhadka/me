model BlogPost {
    id         Int           @id @default(autoincrement())
    authorId   String
    title      String
    coverImage String?
    published  Boolean       @default(false)
    summary    String        @default("")
    content    String        @default("")
    reaction   Int           @default(0)
    deprecated Boolean       @default(false)
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    typeId     Int
    version    Int           @default(1)
    author     User          @relation(fields: [authorId], references: [id])
    type       BlogType      @relation(fields: [typeId], references: [id])
    comments   Comment[]
    tags       BlogPostTag[]
    images     Image[]
}

model BlogType {
    id        Int        @id @default(autoincrement())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    blogPosts BlogPost[]
}

model Image {
    id         String   @id @default(uuid())
    blogPostId Int
    image      String // Image URL or path to storage
    uploadedAt DateTime @default(now())
    blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
}

model PendingImage {
    id         String   @id @default(uuid())
    image      String
    uploadedAt DateTime @default(now()) // In case you need more control
}

model Comment {
    id              String    @id @default(uuid())
    parentCommentId String?
    content         String
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    upvotes         Int       @default(0)
    downvotes       Int       @default(0)
    userId          String?
    blogPostId      Int
    user            User?     @relation(fields: [userId], references: [id])
    blogPost        BlogPost  @relation(fields: [blogPostId], references: [id])
    // Self-relation for nested comments (replies)
    parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
    replies         Comment[] @relation("CommentReplies")
}

model Tag {
    id           Int           @id @default(autoincrement())
    name         String        @unique
    blogPostTags BlogPostTag[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model BlogPostTag {
    blogPostId Int
    tagId      Int
    blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
    tag        Tag      @relation(fields: [tagId], references: [id])

    @@id([blogPostId, tagId])
}
